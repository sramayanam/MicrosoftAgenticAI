# =============================================================================
# Bridge Engineering Multi-Agent System - Environment Configuration
# =============================================================================
# Copy this file to .env and fill in your actual values
# DO NOT commit .env to version control!
#
# Quick Start:
# 1. cp .env.sample .env
# 2. Fill in all required values below
# 3. Run: uv sync
# 4. Start agents: uv run python -m sql_foundry_agent
#                  uv run python -m databricks_agent
#                  uv run python -m python_tool_agent
# 5. Launch UI: uv run streamlit run streamlit_app_v1.py
# =============================================================================

# -----------------------------------------------------------------------------
# Azure Application Insights (for Distributed Tracing & Observability)
# -----------------------------------------------------------------------------
# Required: Azure Application Insights Connection String
# Get this from: Azure Portal -> Your Application Insights Resource -> Overview -> Connection String
# This enables end-to-end distributed tracing across frontend, orchestrator, and all agents
# Format: InstrumentationKey=xxxx;IngestionEndpoint=https://xxxx.in.applicationinsights.azure.com/;LiveEndpoint=https://xxxx.livediagnostics.monitor.azure.com/
APPLICATIONINSIGHTS_CONNECTION_STRING="InstrumentationKey=your-instrumentation-key;IngestionEndpoint=https://region.in.applicationinsights.azure.com/"

# Optional: Leave empty to disable observability (for testing/development)
# APPLICATIONINSIGHTS_CONNECTION_STRING=

# -----------------------------------------------------------------------------
# Azure AI Foundry Configuration (for SQL Foundry Agent)
# -----------------------------------------------------------------------------
# Required: Your Azure AI Foundry Project Endpoint
# Get this from: Azure AI Studio -> Your Project -> Settings -> Project Connection String
PROJECT_ENDPOINT="https://your-ai-foundry.services.ai.azure.com/api/projects/your-project"

# Required: Your existing Azure AI Foundry SQL Agent ID
# Get this from: Azure AI Studio -> Your Project -> Agents -> Copy Agent ID
# NOTE: The agent must have Fabric tool configured with connection to the database
AZURE_AI_FOUNDRY_AGENT_ID="asst_xxxxxxxxxxxxx"

# Required: Your existing Azure AI Foundry Bing Grounding Agent ID
# Get this from: Azure AI Studio -> Your Project -> Agents -> Copy Agent ID
# NOTE: The agent must have Bing search grounding configured in Azure AI Foundry
# This agent is used for construction costing and market pricing queries
BING_GROUNDING_AGENT_ID="asst_yyyyyyyyyyyyy"

# Required: Azure OpenAI Model Deployment Name (used by AI Foundry agent)
MODEL_DEPLOYMENT_NAME="gpt-4o"

# -----------------------------------------------------------------------------
# Azure OpenAI Configuration (for Smart Orchestrator & Python Tool Agent)
# -----------------------------------------------------------------------------
# Required: Azure OpenAI Service Endpoint
# Get this from: Azure Portal -> Your Azure OpenAI Resource -> Keys and Endpoint
AZURE_OPENAI_ENDPOINT="https://your-openai-resource.openai.azure.com/"

# Required: Azure OpenAI API Key
# Get this from: Azure Portal -> Your Azure OpenAI Resource -> Keys and Endpoint -> Key 1
AZURE_OPENAI_API_KEY="your-azure-openai-api-key-here"

# Required: Chat Completion Deployment Name (for orchestrator and Python agent)
# Get this from: Azure OpenAI Studio -> Deployments
AZURE_OPENAI_CHAT_DEPLOYMENT_NAME="gpt-4o"

# -----------------------------------------------------------------------------
# Azure Container Apps Dynamic Sessions (for Python Tool Agent)
# -----------------------------------------------------------------------------
# Required: Session Pool Management Endpoint
# Get this from: Azure Portal -> Your Container Apps Session Pool -> Properties -> Pool Management Endpoint
# Format: https://{region}.dynamicsessions.io/subscriptions/{sub-id}/resourceGroups/{rg}/sessionPools/{pool-name}
AZURE_CONTAINER_APP_SESSION_POOL_ENDPOINT="https://eastus2.dynamicsessions.io/subscriptions/your-sub-id/resourceGroups/your-rg/sessionPools/your-pool"

# -----------------------------------------------------------------------------
# Databricks Agent Configuration (via MCP Server through APIM)
# -----------------------------------------------------------------------------
# Required: Databricks MCP Server URL (exposed through Azure API Management)
# This is the APIM endpoint that proxies to the containerized MCP server
DATABRICKS_MCP_SERVER_URL="https://apim-xxxxx.azure-api.net/databricksmcp"

# Optional: Databricks MCP Display Name
DATABRICKS_MCP_NAME="Databricks MCP"

# Required: Backend API Application ID (for JWT token audience)
# This is the App Registration ID of the backend MCP server
DATABRICKS_BACKEND_APP_ID="your-backend-app-id"

# Required: Agent Service Principal credentials (for APIM JWT authentication)
# Create a service principal with access to the backend API:
# az ad sp create-for-rbac --name "databricks-agent-sp"
DATABRICKS_AGENT_CLIENT_ID="your-agent-client-id"
DATABRICKS_AGENT_CLIENT_SECRET="your-agent-client-secret"
DATABRICKS_TENANT_ID="your-tenant-id"

# -----------------------------------------------------------------------------
# A2A Agent URLs (for Smart Orchestrator)
# -----------------------------------------------------------------------------
# URLs where each A2A agent is running
SQL_AGENT_URL="http://localhost:10008"
DATABRICKS_AGENT_URL="http://localhost:10010"
PYTHON_AGENT_URL="http://localhost:10009"
BING_AGENT_URL="http://localhost:10011"

# -----------------------------------------------------------------------------
# A2A Server Configuration (Optional overrides)
# -----------------------------------------------------------------------------
# Optional: Host for A2A servers (default: localhost)
A2A_HOST="localhost"

# Optional: Ports for each agent server
SQL_AGENT_PORT=10008
DATABRICKS_AGENT_PORT=10010
PYTHON_AGENT_PORT=10009
BING_AGENT_PORT=10011

# -----------------------------------------------------------------------------
# Logging Configuration
# -----------------------------------------------------------------------------
# Optional: Logging Level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL="INFO"

# =============================================================================
# Setup Instructions
# =============================================================================
#
# 1. Azure AI Foundry Setup:
#    - Create an Azure AI Foundry project
#    - Create a SQL agent (or use existing NL2SQL agent) with Fabric tool
#    - Note the PROJECT_ENDPOINT and AZURE_AI_FOUNDRY_AGENT_ID
#
# 2. Azure OpenAI Setup:
#    - Create an Azure OpenAI resource
#    - Deploy a chat model (e.g., gpt-4o)
#    - Copy the endpoint and API key
#
# 3. Azure Container Apps Dynamic Sessions Setup:
#    - Create a Container Apps environment
#    - Create a Session Pool for Python code execution
#    - Copy the pool management endpoint
#
# 4. Databricks MCP Server Setup:
#    - Deploy MCP server to container app
#    - Configure APIM to proxy MCP endpoints
#    - Create service principal for APIM authentication
#    - Configure JWT validation in APIM policy
#
# 5. Azure Application Insights Setup:
#    - Create Application Insights resource
#    - Copy connection string for distributed tracing
#
# 6. Authentication:
#    - Run: az login (for DefaultAzureCredential)
#    - Or provide service principal credentials
#
# =============================================================================
# Troubleshooting
# =============================================================================
#
# Issue: "Authentication failed"
# Solution: Run 'az login' or verify service principal credentials
#
# Issue: "Agent not found"
# Solution: Verify AZURE_AI_FOUNDRY_AGENT_ID in Azure AI Studio
#
# Issue: "Session pool not accessible"
# Solution: Check AZURE_CONTAINER_APP_SESSION_POOL_ENDPOINT and permissions
#
# Issue: "Port already in use"
# Solution: Change port or kill existing process: lsof -ti:10008 | xargs kill -9
#
# Issue: "Traces not showing in Application Insights"
# Solution: Verify APPLICATIONINSIGHTS_CONNECTION_STRING is correct
#           Check that all agents started successfully
#           Wait 2-3 minutes for telemetry to appear
#
# Issue: "Databricks agent connection failed"
# Solution: Verify APIM URL and service principal credentials
#           Check APIM JWT validation policy is configured
#
# =============================================================================
