# =============================================================================
# Bridge Engineering Multi-Agent System - Environment Configuration
# =============================================================================
# Copy this file to .env and fill in your actual values
# DO NOT commit .env to version control!
#
# Quick Start:
# 1. cp .env.sample .env
# 2. Fill in all required values below
# 3. Run: uv sync
# 4. Start agents: uv run python -m sql_foundry_agent
#                  uv run python -m python_tool_agent
# 5. Launch UI: uv run streamlit run streamlit_app.py
# =============================================================================

# -----------------------------------------------------------------------------
# Azure AI Foundry Configuration (for SQL Foundry Agent)
# -----------------------------------------------------------------------------
# Required: Your Azure AI Foundry Project Endpoint
# Get this from: Azure AI Studio -> Your Project -> Settings -> Project Connection String
PROJECT_ENDPOINT="https://your-ai-foundry.services.ai.azure.com/api/projects/your-project"

# Required: Your existing Azure AI Foundry SQL Agent ID
# Get this from: Azure AI Studio -> Your Project -> Agents -> Copy Agent ID
AZURE_AI_FOUNDRY_AGENT_ID="asst_xxxxxxxxxxxxx"

# Required: Azure OpenAI Model Deployment Name (used by AI Foundry agent)
MODEL_DEPLOYMENT_NAME="gpt-4.1"

# -----------------------------------------------------------------------------
# Azure OpenAI Configuration (for Python Tool Agent - Semantic Kernel)
# -----------------------------------------------------------------------------
# Required: Azure OpenAI Service Endpoint
# Get this from: Azure Portal -> Your Azure OpenAI Resource -> Keys and Endpoint
AZURE_OPENAI_ENDPOINT="https://your-openai-resource.openai.azure.com/"

# Required: Azure OpenAI API Key
# Get this from: Azure Portal -> Your Azure OpenAI Resource -> Keys and Endpoint -> Key 1
AZURE_OPENAI_API_KEY="your-azure-openai-api-key-here"

# Required: Chat Completion Deployment Name
# Get this from: Azure OpenAI Studio -> Deployments
AZURE_OPENAI_CHAT_DEPLOYMENT_NAME="gpt-4"

# -----------------------------------------------------------------------------
# Azure Container Apps Dynamic Sessions (for Python Tool Agent)
# -----------------------------------------------------------------------------
# Required: Session Pool Management Endpoint
# Get this from: Azure Portal -> Your Container Apps Session Pool -> Properties -> Pool Management Endpoint
# Format: https://{region}.dynamicsessions.io/subscriptions/{sub-id}/resourceGroups/{rg}/sessionPools/{pool-name}
AZURE_CONTAINER_APP_SESSION_POOL_ENDPOINT="https://eastus2.dynamicsessions.io/subscriptions/your-sub-id/resourceGroups/your-rg/sessionPools/your-pool"

# -----------------------------------------------------------------------------
# Azure Service Principal (Optional - for session pool file downloads)
# -----------------------------------------------------------------------------
# Required for downloading files from Dynamic Sessions
# Create a service principal: az ad sp create-for-rbac --name "bridge-agent-sp"
# Grant access: az role assignment create --assignee {client-id} --role Contributor --scope {session-pool-id}

# Optional: Azure Tenant ID
AZURE_TENANT_ID="your-tenant-id-here"

# Optional: Service Principal Client ID (Application ID)
AZURE_CLIENT_ID="your-client-id-here"

# Optional: Service Principal Client Secret
AZURE_CLIENT_SECRET="your-client-secret-here"

# -----------------------------------------------------------------------------
# A2A Server Configuration
# -----------------------------------------------------------------------------
# Optional: Host for A2A servers (default: localhost)
A2A_HOST=localhost

# Optional: SQL Foundry Agent Port (default: 10008)
A2A_PORT=10008

# Optional: Python Tool Agent Port (default: 10009)
# Note: This is not directly used but mentioned for documentation
# PYTHON_TOOL_PORT=10009

# -----------------------------------------------------------------------------
# Logging Configuration
# -----------------------------------------------------------------------------
# Optional: Logging Level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# =============================================================================
# Setup Instructions
# =============================================================================
#
# 1. Azure AI Foundry Setup:
#    - Create an Azure AI Foundry project
#    - Create a SQL agent (or use existing NL2SQL agent)
#    - Note the PROJECT_ENDPOINT and AZURE_AI_FOUNDRY_AGENT_ID
#
# 2. Azure OpenAI Setup:
#    - Create an Azure OpenAI resource
#    - Deploy a chat model (e.g., gpt-4)
#    - Copy the endpoint and API key
#
# 3. Azure Container Apps Dynamic Sessions Setup:
#    - Create a Container Apps environment
#    - Create a Session Pool for Python code execution
#    - Copy the pool management endpoint
#
# 4. Service Principal (Optional but Recommended):
#    az ad sp create-for-rbac --name "bridge-agent-sp" --role Contributor \
#      --scopes /subscriptions/{sub-id}/resourceGroups/{rg}/providers/Microsoft.App/sessionPools/{pool}
#
# 5. Authentication:
#    - Run: az login (for DefaultAzureCredential)
#    - Or provide service principal credentials above
#
# =============================================================================
# Troubleshooting
# =============================================================================
#
# Issue: "Authentication failed"
# Solution: Run 'az login' or verify service principal credentials
#
# Issue: "Agent not found"
# Solution: Verify AZURE_AI_FOUNDRY_AGENT_ID in Azure AI Studio
#
# Issue: "Session pool not accessible"
# Solution: Check AZURE_CONTAINER_APP_SESSION_POOL_ENDPOINT and permissions
#
# Issue: "Port already in use"
# Solution: Change A2A_PORT or kill existing process: lsof -ti:10008 | xargs kill -9
#
# =============================================================================
